#include <stdio.h>
#include <string.h>
#include "Mesh.h"
#include "CVector.h"

Mesh g_Mesh = NULL;

void FreeMesh(void)
{
    cvector_free(g_Mesh.verts);
    cvector_free(g_Mesh.faces);
    cvector_free(g_Mesh.verts_transformed);
}

int LoadOBJ(char *filename)
{
    FILE *file;
    char line[256];
    int vertex_indices[3];
    int texture_indices[3];
    int normal_indices[3];
    float vertex_float[3];
    int i;
    V3D vertex;
    V3D _verts[4];
    TRI face;

    g_Mesh.verts = NULL;
    g_Mesh.faces = NULL;
    g_Mesh.verts_transformed = NULL;

    file = fopen(filename, "r");
    if (file == NULL)
    {
        printf("ERROR - Unable to find file.\n");
        return 1;
    }

    while (fgets(line, 256, file))
    {
        // Vertex information
        if (strncmp(line, "v ", 2) == 0)
        {
            sscanf(line, "v %f %f %f", &vertex_float[0], &vertex_float[1], &vertex_float[2]);
            vertex.x = float2fix(vertex_float[0] * 65.f);
            vertex.y = float2fix(vertex_float[1] * 65.f);
            vertex.z = float2fix(vertex_float[2] * 65.f);
            cvector_push_back(g_Mesh.verts, vertex);
        }
        // // Face information
        if (strncmp(line, "f ", 2) == 0)
        {
            sscanf(
                line, "f %d/%d/%d %d/%d/%d %d/%d/%d",
                &vertex_indices[0], &texture_indices[0], &normal_indices[0],
                &vertex_indices[1], &texture_indices[1], &normal_indices[1],
                &vertex_indices[2], &texture_indices[2], &normal_indices[2]);

            face.a = vertex_indices[0] - 1;
            face.b = vertex_indices[1] - 1;
            face.c = vertex_indices[2] - 1;
            face.next = NULL;

            cvector_push_back(g_Mesh.faces, face);
        }
    }

    for (i = 0; i < cvector_size(g_Mesh.faces); ++i)
    {
        _verts[0] = g_Mesh.verts[g_Mesh.faces[i].a];
        _verts[1] = g_Mesh.verts[g_Mesh.faces[i].b];
        _verts[2] = g_Mesh.verts[g_Mesh.faces[i].c];
        Normal(&_verts[0], &_verts[2], &_verts[1], &g_Mesh.faces[i].normal);
        Normalize(&g_Mesh.faces[i].normal);
    }

    cvector_copy(g_Mesh.verts, g_Mesh.verts_transformed);

    fclose(file);

    return 0;
}
