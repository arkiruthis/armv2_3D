

        GET h.SWINames ; Import the SWI names

        AREA |C$$code|, CODE, READONLY

; ====== RESERVE SCREEN BANKS =====
; Set the display to Mode 13 and disable the screen cursor.

        EXPORT  VDUSetup
VDUSetup
        ; Only enable OS_WriteC VDU output through OS_Byte_3
        MOV r0,#3
        MOV r1,#84
        SWI OS_Byte

        ; Set Mode 13
        MOV r0,#22 ; VDU 22
        SWI OS_WriteC
        MOV r0,#13
        SWI OS_WriteC
        SWI OS_RemoveCursors
        MOVS pc,lr

; ====== SET BUFFERS =====
; Save the memory buffer details from the C side
; TODO - We can do this all on the ASM side... stop using the kernel SWI C funcs.

        EXPORT  SetBuffers ; (R1: oneOver)
SetBuffers
        STR a1,OneOver
        MOVS pc,lr

        EXPORT  UpdateMemAddress ; (R1: screenStart, R2: screenMax)
UpdateMemAddress
        STR a1,ScreenStart
        ;STR a2,ScreenMax
        MOVS pc,lr

; ====== RESERVE SCREEN BANKS =====
; Reserve 2 banks of screen memory

        EXPORT  ReserveScreenBanks
ReserveScreenBanks
        MVN r0,#0 ; -1 to get current screen mode
        MOV r1,#7 ; Number of bytes for entire screen
        SWI OS_ReadModeVariable

        MOV r3,#2   ; Double buffered (2 banks)
        MUL r1,r2,r3 ; Double the number of bytes for 1 screen
        MOV r2,r1

        MOV r0,#2 ; Read area 2 (aka screen area)
        SWI OS_ReadDynamicArea

        SUB r1,r2,r1 ; Subtract 2 screens from total available memory
        MOV r0,#2
        SWI OS_ChangeDynamicArea
;        MOV r0,r1 ; Return the amount the area has changed (in bytes)
        MOVS pc,lr
; ====== SWITCH SCREEN BANK =====
; Toggles the current screen bank for drawing.

        EXPORT  SwitchScreenBank
SwitchScreenBank
        MOV r0,#19 ; Wait for refresh
        SWI OS_Byte

        LDR r1,ScreenBank ; Load the current drawing bank and make it the visible bank
        MOV r0,#113 ; Select the visible bank
        SWI OS_Byte

        LDR r1,ScreenBank ; Reload, as 113 may corrupt r1
        ADD r1,r1,#1 ; Increment current bank
        CMP r1,#2    ; If greater than 2
        MOVGT r1,#1  ; Reset back to 1
        STR r1,ScreenBank

        MOV r0,#112 ; Set the buffer bank for drawing
        SWI OS_Byte

        MOV pc,lr

; ====== CLEAR SCREEN =====
; Clears the current screen buffer 40 bytes at a time.

        EXPORT ClearScreen ; ClearScreen(int color);
ClearScreen
        STMFD sp!,{r4-r11}
        MOV r3, r0
        MOV r4, r0
        MOV r5, r0
        MOV r6, r0
        MOV r7, r0
        MOV r8, r0
        MOV r9, r0
        MOV r10, r0
        MOV r11, r0

        CMP r1,#0
        LDR r2,ScreenMax
        LDR r1,ScreenStart
        ADDEQ r1,r1,r2,LSR#2
        MOVEQ r2,r2,LSR#1
        ADD r12, r1, r2
        MOV r2,r0
        ; a1 has start, a2 is the max mem location
CSloop  ; Write 10 words at a time till max
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        CMPS r1,r12
        BLT CSloop

        LDMFD sp!,{r4-r11}
        MOV pc,lr

OneOver         DCD &0  ; Our table of reciprocal 1/X values in fixed point
ScreenBank      DCD &1  ; Initial screen bank index
ScreenStart     DCD &0
ScreenMax       DCD &00014000
TopHeight       DCD 0   ; Height of the triangle top half
BottomHeight    DCD 0   ; Height of the triangle bottom half
LeftDXBottom    DCD 0   ; Delta for the bottom left side (stored for later use)
RightDXBottom   DCD 0   ; Delta for the bottom right side (stored for later use)
LongSideRight   DCD 0   ; 0 = Long side left, 1 = Long side right
ShortSideXMid   DCD 0   ; X value of the middle short side vertex

ALIGN

TopShortDX        RN 0
LongSideDX        RN 1
BottomShortDX     RN 2

        EXPORT SortVertices
SortVertices 
        STMFD sp!,{r4-r6} ; Store the current registers
        LDMFD a1!,{r1-r6} ; Load 3 2D un-sorted coords

        ; X1 = R1, Y1 = R2, X2 = R3, Y2 = R4, etc. etc.

        ; Sort V0-V2 by Y, swap where necessary.
        ; V0 and V1
        CMP r2,r4
        MOVGT r12,r1
        MOVGT r1,r3
        MOVGT r3,r12
        MOVGT r12,r2
        MOVGT r2,r4
        MOVGT r4,r12

        ; V0 and V2
        CMP r2,r6
        MOVGT r12,r1
        MOVGT r1,r5
        MOVGT r5,r12
        MOVGT r12,r2
        MOVGT r2,r6
        MOVGT r6,r12

        ; V1 and V2
        CMP r4,r6
        MOVGT r12,r3
        MOVGT r3,r5
        MOVGT r5,r12
        MOVGT r12,r4
        MOVGT r4,r6
        MOVGT r6,r12

        STMFD a1!,{r1-r6} ; Store 3 2D un-sorted coords

        LDMFD sp!,{r4-r6} ; Restore registers
        MOV pc,lr

        EXPORT DrawTriangle ; DrawTriangle(int triList, int color);
DrawTriangle
        STMFD sp!,{r0-r1,r4-r12,r14} ; Store the current registers

        LDMFD r0!,{r7,r8}       ; Load 3 2D un-sorted coords
        ADD r0,r0,#4            ; Skip z
        LDMFD r0!,{r9,r10} 
        ADD r0,r0,#4
        LDMFD r0,{r11,r12}

        ; X1 = R1, Y1 = R2, X2 = R3, Y2 = R4, etc. etc.

        MOV r7,r7,ASR#16
        MOV r8,r8,ASR#16
        MOV r9,r9,ASR#16
        MOV r10,r10,ASR#16
        MOV r11,r11,ASR#16
        MOV r12,r12,ASR#16
        
        ADD r7,r7,#160
        ADD r8,r8,#128
        ADD r9,r9,#160
        ADD r10,r10,#128
        ADD r11,r11,#160
        ADD r12,r12,#128

        CMP r7,#0
        BLT EdgeLoopEndBottom
        CMP r7,#320
        BGE EdgeLoopEndBottom
        CMP r9,#0
        BLT EdgeLoopEndBottom
        CMP r9,#320
        BGE EdgeLoopEndBottom
        CMP r11,#0
        BLT EdgeLoopEndBottom
        CMP r11,#320
        BGE EdgeLoopEndBottom

        CMP r8,#0
        BLT EdgeLoopEndBottom
        CMP r8,#256
        BGE EdgeLoopEndBottom
        CMP r10,#0
        BLT EdgeLoopEndBottom
        CMP r10,#256
        BGE EdgeLoopEndBottom
        CMP r12,#0
        BLT EdgeLoopEndBottom
        CMP r12,#256
        BGE EdgeLoopEndBottom

        ; Sort V0-V2 by Y, swap where necessary.
        ; V0 and V1
        CMP r8,r10
        MOVGT r2,r7
        MOVGT r7,r9
        MOVGT r9,r2
        MOVGT r2,r8
        MOVGT r8,r10
        MOVGT r10,r2

        ; V0 and V2
        CMP r8,r12
        MOVGT r2,r7
        MOVGT r7,r11
        MOVGT r11,r2
        MOVGT r2,r8
        MOVGT r8,r12
        MOVGT r12,r2

        ; V1 and V2
        CMP r10,r12
        MOVGT r2,r9
        MOVGT r9,r11
        MOVGT r11,r2
        MOVGT r2,r10
        MOVGT r10,r12
        MOVGT r12,r2        

        STR r9,ShortSideXMid ; We need middle X coord for the short side switch later.

        LDR r5,OneOver ; start of oneOver block
        SUB TopShortDX,r10,r8 ; shorty - starty, store in TopShortDX
        STR TopShortDX,TopHeight ; Store the TopHeight for use in top raster loop.

        LDR r3,[r5,TopShortDX,LSL#2] ; >> 16 << 2 (4 byte jump)
        SUB TopShortDX,r9,r7  ; shortx - startx, store in TopShortDX
        MUL TopShortDX,r3,TopShortDX  ; Multiply OneOver by short X delta

        SUB LongSideDX,r12,r8 ; longy - starty, store in LongSideDX

        LDR r3,[r5,LongSideDX,LSL#2] ; >> 16 << 2 (4 byte jump)
        SUB LongSideDX,r11,r7 ; longx - startx, store in LongSideDX
        MUL LongSideDX,r3,LongSideDX  ; Multiply OneOver by long X delta

        SUB BottomShortDX,r12,r10 ; longy - shorty, store in BottomShortDX
        STR BottomShortDX,BottomHeight ; Store the BottomHeight for use in bottom raster loop.

        LDR r3,[r5,BottomShortDX,LSL#2] ; >> 16 << 2 (4 byte jump)
        SUB BottomShortDX,r11,r9 ; longx - shortx, store in BottomShortDX
        MUL BottomShortDX,r3,BottomShortDX  ; Multiply OneOver by long X delta

        CMP TopShortDX,LongSideDX                 ; Compare deltas
        MOVLT r14,#1
        MOVLT r5,TopShortDX
        MOVLT r6,LongSideDX
        STRLT BottomShortDX, LeftDXBottom         ; Short side is on the left
        STRLT LongSideDX, RightDXBottom           ; Long side is on the right
        MOVGE r14,#0
        MOVGE r5,LongSideDX 
        MOVGE r6,TopShortDX
        STRGE BottomShortDX, RightDXBottom        ; Short side is on the right
        STRGE LongSideDX, LeftDXBottom            ; Long side is on the left

        STR r14,LongSideRight

        LDR r11,ScreenStart     ; Load the screen mem start location
        MOV r12,r8              ; Initial Y position
        MOV r14,r12,LSL#8       ; Multiply by 320 in 2 stages (<< 8) + (<< 6)
        ADD r14,r14,r12,LSL#6   ; Total Y offset * 320
        ADD r11,r11,r14         ; Add Y offset to screen offset start location

        LDR r14,TopHeight

        MOV r7,r7,LSL#16        ; Move to fixed point. Start X
        MOV r8,r7               ; As we are at the top, minX and maxX are Start X

EdgeLoopTop
        CMP r14,#0
        BLE EdgeLoopEndTop

        AND r1,r14,#3            ; Get the remainder of the Y coord / 4
        LDR r0,[sp,#4]          ; Load the start address of the color lookup table
        ADD r0,r0,r1,LSL#8      ; Add the remainder to the start of the color lookup table
        LDR r0,[r0]

        ADD r9,r11,r7,LSR#16
        ADD r10,r11,r8,LSR#16

        BIC r9,r9,#3
        ;ADD r9,r9,#4
        BIC r10,r10,#3
        ;ADD r9,r9,#4

        SUB r4,r10,r9           ; Get the number of pixels left
        CMP r4,#4
        BLT SPINLAST

        ; MOV r1,r0
        ; MOV r0,#237
        ; ORR r0,r0,r0,LSL#8
        ; ORR r0,r0,r0,LSL#16
        ; CMP r9,r10
        ; STRLTB r0,[r9],#1
        ; CMPLT r9,r10
        ; STRLTB r0,[r9],#1
        ; CMPLT r9,r10
        ; STRLTB r0,[r9],#1

        ; MOV r0,r1

; LONGSTART        
;         ANDS r2,r9,#3            ; Check for sub-quad start
;         BEQ DEND
;         LDR r1,[r9,-r2]         ; Load from the start of the word
;         MVN r3,#0
;         CMP r2,#1
;         BNE OFFSET2
;         BIC r1,r1,r3,LSL#8
;         ORR r1,r1,r0,LSL#8
;         STR r1,[r9,-r2]
;         ADD r9,r9,#3
;         B QUADSTART
; OFFSET2        
;         CMP r2,#2
;         BNE OFFSET3
;         BIC r1,r1,r3,LSL#16
;         ORR r1,r1,r0,LSL#16
;         STR r1,[r9,-r2]
;         ADD r9,r9,#2
;         B QUADSTART
; OFFSET3        
;         BIC r1,r1,r3,LSL#24
;         ORR r1,r1,r0,LSL#24
;         STR r1,[r9,-r2]
;         ADD r9,r9,#1

;         B QUADSTART

QUADSTART
        SUB r4,r10,r9           ; Get the number of pixels left
        MOV r4,r4,LSR#4
        CMP r4,#16
        BGT DEND
        RSB r4,r4,#16 ; reverse order
        MOV r1,r0
        MOV r2,r0
        MOV r3,r0
        ADD pc,pc,r4,LSL#2 ; If remaining width > 16 pixels, we can use this jump table.
        MOV r0,r0
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}

        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}

        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}

        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}

        ; ; In theory, there should be less than 16 bytes left, so attempt STR with quads now
        MOV r0,#21
        ORR r0,r0,r0,LSL#8
        ORR r0,r0,r0,LSL#16
        SUB r4,r10,r9           ; Get the number of pixels left
        MOV r4,r4,LSR#2
        RSB r4,r4,#4 ; reverse order
        ADD pc,pc,r4,LSL#2 ; If remaining width > 4 pixels, we can use this jump table.
        MOV r0,r0
        STR r0,[r9],#4
        STR r0,[r9],#4
        STR r0,[r9],#4
        STR r0,[r9],#4

SPINLAST
        SUBS r4,r10,r9           ; Get the number of pixels left

; DERPY
;         MOV r0,#67
;         ORR r0,r0,r0,LSL#8
;         ORR r0,r0,r0,LSL#16
;         CMP r9,r10
;         STRLTB r0,[r9],#1
;         BLT DERPY




;         CMP r9,r10
;         STRNEB r0,[r9],#1
;         CMPNE r9,r10
;         STRNEB r0,[r9],#1
;         CMPNE r9,r10
;         STRNEB r0,[r9],#1

DEND         
        SUB r14,r14,#1
        ADD r11,r11,#320
        ADD r7,r7,r5
        ADD r8,r8,r6

        B EdgeLoopTop
EdgeLoopEndTop

        LDR r6,ShortSideXMid
        LDR r5,LongSideRight
        TST r5,#1
        MOVNE r7,r6,LSL#16
        MOVEQ r8,r6,LSL#16

        LDR r5,LeftDXBottom
        LDR r6,RightDXBottom
        LDR r14,BottomHeight

EdgeLoopEndBottom

        LDMFD sp!,{r0-r1,r4-r12,r14} ; Restore registers before returning
        MOV pc,lr

        EXPORT KeyPress ; KeyPress(int keycode);
KeyPress
        EOR r1,r0,#&FF
        MOV r0,#129
        MOV r2,#255
        SWI OS_Byte
        MOV r0,r1; r0 contains either 0xFF or 0x00
        MOV pc,lr

        END
