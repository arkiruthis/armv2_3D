

        GET h.SWINames ; Import the SWI names

        AREA |C$$code|, CODE, READONLY

; ====== RESERVE SCREEN BANKS =====
; Set the display to Mode 13 and disable the screen cursor.

        EXPORT  VDUSetup
VDUSetup
        ; Only enable OS_WriteC VDU output through OS_Byte_3
        MOV r0,#3
        MOV r1,#84
        SWI OS_Byte

        ; Set Mode 13
        MOV r0,#22 ; VDU 22
        SWI OS_WriteC
        MOV r0,#13
        SWI OS_WriteC
        SWI OS_RemoveCursors
        MOVS pc,lr

; Constants
IOC_T0LOW     DCD 0x03200050 ; Timer 0 Low Byte
IOC_T0HIGH    DCD 0x03200054 ; Timer 0 High Byte
IOC_T0GO      DCD 0x03200058 ; Timer 0 Go
IOC_T0LATCH   DCD 0x0320005C ; Timer 0 Latch

; Variables
DeltaTime     DCD 0

        EXPORT ResetTimer
ResetTimer
        MOV r0, #&FF
        LDR r1, IOC_T0LOW    ; Set Timer 0 low byte
        STR r0,[r1]
        LDR r1, IOC_T0HIGH   ; Set Timer 0 high byte
        STR r0,[r1]
        LDR r1, IOC_T0GO     ; Go! Go! Go!
        STR r0,[r1]
        MOV pc,lr

        EXPORT  MeasureDelta
MeasureDelta
        MOV r0, #&FF
        LDR r2,IOC_T0LATCH
        STR r0,[r2]
        LDR r2,IOC_T0HIGH ; get high byte
        LDR r2,[r2]
        AND r2,r2,#&FF
        LDR r3,IOC_T0LOW ; get low byte
        LDR r3,[r3]
        AND r3,r3,#&FF
        ORR r2,r3,r2,LSL#8 ; combine LO and HI
        MOV r0,r2   ; Place count in r0 for return value in C
        MOV pc,lr

; ====== SET BUFFERS =====
; Save the memory buffer details from the C side
; TODO - We can do this all on the ASM side... stop using the kernel SWI C funcs.

        EXPORT  SetBuffers ; (R1: oneOver)
SetBuffers
        STR a1,OneOver
        MOVS pc,lr

        EXPORT  UpdateMemAddress ; (R1: screenStart, R2: screenMax)
UpdateMemAddress
        STR a1,ScreenStart
        ;STR a2,ScreenMax
        MOVS pc,lr

; ====== RESERVE SCREEN BANKS =====
; Reserve 2 banks of screen memory

        EXPORT  ReserveScreenBanks
ReserveScreenBanks
        MVN r0,#0 ; -1 to get current screen mode
        MOV r1,#7 ; Number of bytes for entire screen
        SWI OS_ReadModeVariable

        MOV r3,#2   ; Double buffered (2 banks)
        MUL r1,r2,r3 ; Double the number of bytes for 1 screen
        MOV r2,r1

        MOV r0,#2 ; Read area 2 (aka screen area)
        SWI OS_ReadDynamicArea

        SUB r1,r2,r1 ; Subtract 2 screens from total available memory
        MOV r0,#2
        SWI OS_ChangeDynamicArea
;        MOV r0,r1 ; Return the amount the area has changed (in bytes)
        MOVS pc,lr
; ====== SWITCH SCREEN BANK =====
; Toggles the current screen bank for drawing.

        EXPORT  SwitchScreenBank
SwitchScreenBank
        MOV r0,#19 ; Wait for refresh
        SWI OS_Byte

        LDR r1,ScreenBank ; Load the current drawing bank and make it the visible bank
        MOV r0,#113 ; Select the visible bank
        SWI OS_Byte

        LDR r1,ScreenBank ; Reload, as 113 may corrupt r1
        ADD r1,r1,#1 ; Increment current bank
        CMP r1,#2    ; If greater than 2
        MOVGT r1,#1  ; Reset back to 1
        STR r1,ScreenBank

        MOV r0,#112 ; Set the buffer bank for drawing
        SWI OS_Byte

        MOV pc,lr

; ====== CLEAR SCREEN =====
; Clears the current screen buffer 40 bytes at a time.

        EXPORT ClearScreen ; ClearScreen(int color);
ClearScreen
        STMFD sp!,{r4-r11}
        MOV r3, r0
        MOV r4, r0
        MOV r5, r0
        MOV r6, r0
        MOV r7, r0
        MOV r8, r0
        MOV r9, r0
        MOV r10, r0
        MOV r11, r0

        CMP r1,#0
        LDR r2,ScreenMax
        LDR r1,ScreenStart
        ADDEQ r1,r1,r2,LSR#2
        MOVEQ r2,r2,LSR#1
        ADD r12, r1, r2
        MOV r2,r0
        ; a1 has start, a2 is the max mem location
CSloop  ; Write 10 words at a time till max
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        STMEA r1!,{r2-r11}
        CMPS r1,r12
        BLT CSloop

        LDMFD sp!,{r4-r11}
        MOV pc,lr

OneOver         DCD &0  ; Our table of reciprocal 1/X values in fixed point
ScreenBank      DCD &1  ; Initial screen bank index
ScreenStart     DCD &0
ScreenMax       DCD &00014000
TopHeight       DCD 0   ; Height of the triangle top half
BottomHeight    DCD 0   ; Height of the triangle bottom half
LeftDXBottom    DCD 0   ; Delta for the bottom left side (stored for later use)
RightDXBottom   DCD 0   ; Delta for the bottom right side (stored for later use)
LongSideRight   DCD 0   ; 0 = Long side left, 1 = Long side right
ShortSideXMid   DCD 0   ; X value of the middle short side vertex

ALIGN

TopShortDX        RN 0
LongSideDX        RN 1
BottomShortDX     RN 2

        EXPORT SortVertices
SortVertices 
        STMFD sp!,{r4-r6} ; Store the current registers
        LDMFD a1!,{r1-r6} ; Load 3 2D un-sorted coords

        ; X1 = R1, Y1 = R2, X2 = R3, Y2 = R4, etc. etc.

        ; Sort V0-V2 by Y, swap where necessary.
        ; V0 and V1
        CMP r2,r4
        MOVGT r12,r1
        MOVGT r1,r3
        MOVGT r3,r12
        MOVGT r12,r2
        MOVGT r2,r4
        MOVGT r4,r12

        ; V0 and V2
        CMP r2,r6
        MOVGT r12,r1
        MOVGT r1,r5
        MOVGT r5,r12
        MOVGT r12,r2
        MOVGT r2,r6
        MOVGT r6,r12

        ; V1 and V2
        CMP r4,r6
        MOVGT r12,r3
        MOVGT r3,r5
        MOVGT r5,r12
        MOVGT r12,r4
        MOVGT r4,r6
        MOVGT r6,r12

        STMFD a1!,{r1-r6} ; Store 3 2D un-sorted coords

        LDMFD sp!,{r4-r6} ; Restore registers
        MOV pc,lr

        EXPORT DrawTriangle ; DrawTriangle(int triList, int color);
DrawTriangle
        STMFD sp!,{r0-r1,r4-r12,r14} ; Store the current registers

        LDMFD a1, {r7-r12} ; Load sorted coords

        STR r9,ShortSideXMid ; We need middle X coord for the short side switch later.

        LDR r5,OneOver ; start of oneOver block
        SUB TopShortDX,r10,r8 ; shorty - starty, store in TopShortDX
        STR TopShortDX,TopHeight ; Store the TopHeight for use in top raster loop.

        LDR r3,[r5,TopShortDX,LSL#2] ; >> 16 << 2 (4 byte jump)
        SUB TopShortDX,r9,r7  ; shortx - startx, store in TopShortDX
        MUL TopShortDX,r3,TopShortDX  ; Multiply OneOver by short X delta

        SUB LongSideDX,r12,r8 ; longy - starty, store in LongSideDX

        LDR r3,[r5,LongSideDX,LSL#2] ; >> 16 << 2 (4 byte jump)
        SUB LongSideDX,r11,r7 ; longx - startx, store in LongSideDX
        MUL LongSideDX,r3,LongSideDX  ; Multiply OneOver by long X delta

        SUB BottomShortDX,r12,r10 ; longy - shorty, store in BottomShortDX
        STR BottomShortDX,BottomHeight ; Store the BottomHeight for use in bottom raster loop.

        LDR r3,[r5,BottomShortDX,LSL#2] ; >> 16 << 2 (4 byte jump)
        SUB BottomShortDX,r11,r9 ; longx - shortx, store in BottomShortDX
        MUL BottomShortDX,r3,BottomShortDX  ; Multiply OneOver by long X delta

        CMP TopShortDX,LongSideDX                 ; Compare deltas
        MOVLT r14,#1
        MOVLT r5,TopShortDX
        MOVLT r6,LongSideDX
        STRLT BottomShortDX, LeftDXBottom         ; Short side is on the left
        STRLT LongSideDX, RightDXBottom           ; Long side is on the right
        MOVGE r14,#0
        MOVGE r5,LongSideDX 
        MOVGE r6,TopShortDX
        STRGE BottomShortDX, RightDXBottom        ; Short side is on the right
        STRGE LongSideDX, LeftDXBottom            ; Long side is on the left

        STR r14,LongSideRight

        LDR r11,ScreenStart     ; Load the screen mem start location
        MOV r12,r8              ; Initial Y position
        MOV r14,r12,LSL#8       ; Multiply by 320 in 2 stages (<< 8) + (<< 6)
        ADD r14,r14,r12,LSL#6   ; Total Y offset * 320
        ADD r11,r11,r14         ; Add Y offset to screen offset start location

        LDR r14,TopHeight
        LDR r0,[sp,#4]          ; Fill our color registers
        MOV r1,r0
        MOV r2,r0
        MOV r3,r0

        MOV r7,r7,LSL#16        ; Move to fixed point. Start X
        MOV r8,r7               ; As we are at the top, minX and maxX are Start X

EdgeLoopTop
        CMP r14,#0
        BLE EdgeLoopEndTop

        ADD r9,r11,r7,LSR#16
        ADD r10,r11,r8,LSR#16
        SUB r4,r10,r9
        CMP r4,#4
        BLT SPINLAST            ; Too small, just do a byte-by-byte walk

        ; Shuffle up to the quad boundary
        TSTNE r9,#3
        STRNEB r0,[r9],#1
        SUBNE r4,r4,#1
        TSTNE r9,#3
        STRNEB r0,[r9],#1
        SUBNE r4,r4,#1
        TSTNE r9,#3
        STRNEB r0,[r9],#1
        SUBNE r4,r4,#1

        CMP r4,#0
        BLE DEND
        MOV r4,r4,LSR#4
        CMP r4,#16
        BGT DEND
        ADD pc,pc,r4,LSL#2 ; If remaining width > 16 pixels, we can use this jump table.
        B DEND
        B DEND
        B D1
        B D2
        B D3
        B D4
        B D5
        B D6
        B D7
        B D8
D1
        STMIA r9!,{r0-r3}
        B DEND
D2
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        B DEND
D3
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        B DEND
D4
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        B DEND
D5
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        B DEND
D6
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        B DEND
D7
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        B DEND
D8
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        B DEND
DEND 

SPINLAST
        CMP r9,r10
        STRLTB r0,[r9],#1
        BLT SPINLAST

        SUB r14,r14,#1
        ADD r11,r11,#320
        ADD r7,r7,r5
        ADD r8,r8,r6

        B EdgeLoopTop
EdgeLoopEndTop

        LDR r6,ShortSideXMid
        LDR r5,LongSideRight
        TST r5,#1
        MOVNE r7,r6,LSL#16
        MOVEQ r8,r6,LSL#16

        LDR r5,LeftDXBottom
        LDR r6,RightDXBottom
        LDR r14,BottomHeight

EdgeLoopBottom
        CMP r14,#0
        BLE EdgeLoopEndBottom

        ADD r9,r11,r7,LSR#16
        ADD r10,r11,r8,LSR#16
        SUB r4,r10,r9
        CMP r4,#4
        BLT SPINLAST2

        ; Shuffle up to the quad boundary
        TSTNE r9,#3
        STRNEB r0,[r9],#1
        SUBNE r4,r4,#1
        TSTNE r9,#3
        STRNEB r0,[r9],#1
        SUBNE r4,r4,#1
        TSTNE r9,#3
        STRNEB r0,[r9],#1
        SUBNE r4,r4,#1

        CMP r4,#0
        BLE DEND2
        MOV r4,r4,LSR#4
        CMP r4,#16
        BGT DEND2
        ADD pc,pc,r4,LSL#2
        B DEND2
        B DEND2
        B D12
        B D22
        B D32
        B D42
        B D52
        B D62
        B D72
        B D82
D12
        STMIA r9!,{r0-r3}
        B DEND2
D22
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        B DEND2
D32
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        B DEND2
D42
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        B DEND2
D52
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        B DEND2
D62
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        B DEND2
D72
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        B DEND2
D82
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        STMIA r9!,{r0-r3}
        B DEND2
DEND2 

SPINLAST2
        CMP r9,r10
        STRLTB r0,[r9],#1
        BLT SPINLAST2

        SUB r14,r14,#1
        ADD r11,r11,#320
        ADD r7,r7,r5
        ADD r8,r8,r6

        B EdgeLoopBottom
EdgeLoopEndBottom

        LDMFD sp!,{r0-r1,r4-r12,r14} ; Restore registers before returning
        MOV pc,lr

        EXPORT KeyPress ; KeyPress(int keycode);
KeyPress
        EOR r1,r0,#&FF
        MOV r0,#129
        MOV r2,#255
        SWI OS_Byte
        MOV r0,r1; r0 contains either 0xFF or 0x00
        MOV pc,lr

        END
